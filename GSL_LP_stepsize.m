function [ alpha_0 ] = GSL_LP_stepsize(ldp, ...
    beta_0,...
    FW_beta_direction,...
    l_matrix,...
    eig_tol,...
    L_beta,...
    data_label,...
    n_beta,...
    GD_NR)
% step 1: check first derivatives at 0 and 1

% check first derivative at 0
alpha_0=0;

lambda_FW_alpha_0=(beta_0+alpha_0*(FW_beta_direction-beta_0)).*l_matrix+eig_tol; % N x P
lambda_FW_alpha=(FW_beta_direction-beta_0).*l_matrix; % N x P

[ f_alpha_first,~ ] = ...
    first_second_alpha_derivative(ldp, ...
    L_beta,...
    data_label,...
    FW_beta_direction,...
    lambda_FW_alpha_0,...
    lambda_FW_alpha,...
    beta_0,...
    l_matrix,...
    n_beta);
f_alpha_first1=f_alpha_first;

% check first derivative at 1
alpha_0=1;
lambda_FW_alpha_0=(beta_0+alpha_0*(FW_beta_direction-beta_0)).*l_matrix+eig_tol; % N x P
lambda_FW_alpha=(FW_beta_direction-beta_0).*l_matrix; % N x P

[ f_alpha_first,~ ] = ...
    first_second_alpha_derivative(ldp, ...
    L_beta,...
    data_label,...
    FW_beta_direction,...
    lambda_FW_alpha_0,...
    lambda_FW_alpha,...
    beta_0,...
    l_matrix,...
    n_beta);
f_alpha_first2=f_alpha_first;

if f_alpha_first1>=0 && f_alpha_first2>0
    alpha_0=0;
elseif f_alpha_first1<0 && f_alpha_first2<=0
    alpha_0=1;
else
    if GD_NR==1
        gL=0;
        gU=1;
        nn=0;
        tol_GD=1e-5;
        while abs(gL-gU)>tol_GD
            nn=nn+1;
            alpha_0=(gL+gU)/2;
            lambda_FW_alpha_0=(beta_0+alpha_0*(FW_beta_direction-beta_0)).*l_matrix+eig_tol; % N x P
            [ G_gM,~ ] = ...
                first_second_alpha_derivative(ldp, ...
                L_beta,...
                data_label,...
                FW_beta_direction,...
                lambda_FW_alpha_0,...
                lambda_FW_alpha,...
                beta_0,...
                l_matrix,...
                n_beta);
            if G_gM>0 % fmin=f(gamma\in[gL,gamma])
                gU=alpha_0;
            elseif G_gM<0 % fmin=f(gamma\in[gamma,gU])
                gL=alpha_0;
            else % G_gM=0
                %gamma=gM;
                break
            end
        end
    else
        alpha_0=0;
        delta_alpha=Inf;
        while delta_alpha>1e-5
            lambda_FW_alpha_0=(beta_0+alpha_0*(FW_beta_direction-beta_0)).*l_matrix+eig_tol; % N x P
            lambda_FW_alpha=(FW_beta_direction-beta_0).*l_matrix; % N x P
            
            [ f_alpha_first,f_alpha_second ] = ...
                first_second_alpha_derivative(ldp, ...
                L_beta,...
                data_label,...
                FW_beta_direction,...
                lambda_FW_alpha_0,...
                lambda_FW_alpha,...
                beta_0,...
                l_matrix,...
                n_beta);
            
            if f_alpha_second==0
                gL=0;
                gU=1;
                nn=0;
                tol_GD=1e-5;
                while abs(gL-gU)>tol_GD
                    nn=nn+1;
                    alpha_0=(gL+gU)/2;
                    lambda_FW_alpha_0=(beta_0+alpha_0*(FW_beta_direction-beta_0)).*l_matrix+eig_tol; % N x P
                    [ G_gM,~ ] = ...
                        first_second_alpha_derivative(ldp, ...
                        L_beta,...
                        data_label,...
                        FW_beta_direction,...
                        lambda_FW_alpha_0,...
                        lambda_FW_alpha,...
                        beta_0,...
                        l_matrix,...
                        n_beta);
                    if G_gM>0 % fmin=f(gamma\in[gL,gamma])
                        gU=alpha_0;
                    elseif G_gM<0 % fmin=f(gamma\in[gamma,gU])
                        gL=alpha_0;
                    else % G_gM=0
                        %gamma=gM;
                        break
                    end
                end
                break
            end
            
            alpha_current=alpha_0-(f_alpha_first/f_alpha_second);
            if alpha_current>1
                alpha_0=1;
                break
            elseif alpha_current<0
                alpha_0=0;
                break
            end
            delta_alpha=norm(alpha_current-alpha_0);
            alpha_0=alpha_current;
        end
        
    end
end

end

